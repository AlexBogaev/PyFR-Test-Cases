# =============================
# RUN INSTRUCTIONS
# =============================
# cd /home/dp114856/PyFR
# source venv/bin/activate
# =============================
# SINGLE MPI RANK
# =============================
# cd /home/dp114856/scratch/PyFR/2d-square-cylinder-Re22000
# gmsh square_cylinder_mesh_struc_reduced.geo -2 -o square_cylinder_mesh_struc_reduced_FAC2.msh
# pyfr import square_cylinder_mesh_struc_reduced_FAC2.msh square-cylinder-struc-reduced-FAC2.pyfrm
# =============================
# RUN SINGLE MPI RANK
# =============================
# pyfr -p run -b cuda square-cylinder-struc-reduced-FAC2.pyfrm square-cylinder-compressible.ini
# pyfr -p restart -b cuda square-cylinder-struc-FAC4.pyfrm square-cylinder-compressible-6.00.pyfrs square-cylinder-compressible.ini
# =============================
# RUN MULTIPLE MPI RANKS
# =============================
# pyfr partition 2 square-cylinder-struc-FAC1.pyfrm .
# mpiexec -n 2 pyfr -p run -b openmp square-cylinder-struc-FAC1.pyfrm square-cylinder-compressible.ini
# =============================
# BACKEND
# =============================

[backend]
precision = double
rank-allocator = linear

[backend-cuda]
device-id = round-robin
mpi-type = cuda-aware

# =============================
# CONSTANTS
# =============================

[constants]
# PyFR Constants
gamma = 1.4
mu = 1.85e-5
Pr = 0.73

# User Defined Constants
Re = 22000
D = 0.010
rho_ref = 1.177
u_ref = 34.579
v_ref = 0
p_ref = 101325

# =============================
# SOLVER
# =============================

[solver]
system = navier-stokes
order = 4
shock-capturing = entropy-filter

[solver-entropy-filter]
d-min = 1e-6
p-min = 1e-6
e-tol = 1e-4

[solver-time-integrator]
scheme = rk4
controller = none
tstart = 0.0
tend = 0.05
dt = 1e-7

[solver-interfaces]
riemann-solver = roem
ldg-beta = 0.5
ldg-tau = 0.1

[solver-interfaces-line]
flux-pts = gauss-legendre-lobatto

[solver-elements-quad]
soln-pts = gauss-legendre-lobatto

# =============================
# INITIALIZATION
# =============================

[soln-ics]
rho = 1.177
u = 0
v = 0
p = 101325

# =============================
# BOUNDARY CONDITIONS
# =============================

[soln-bcs-inlet]
type = sub-in-frv
rho = rho_ref 
u = u_ref
v = v_ref

[soln-bcs-outlet]
type = sub-out-fp
p = p_ref

[soln-bcs-cylinder]
type = no-slp-adia-wall

[soln-bcs-top]
type = slp-adia-wall

[soln-bcs-bottom]
type = slp-adia-wall

# =============================
# PLUGINS
# =============================

[soln-plugin-nancheck]
nsteps = 50

[soln-plugin-writer]
dt-out = 0.005
basedir = out_order4_FAC2
basename = square-cylinder-compressible-{t:2.5f}
post-action = echo "Wrote file {soln} at time {t} for mesh {mesh}."

[soln-plugin-ascent]
nsteps = 250
division = 5

# =============================
# RENDERING
# =============================

field-kenergy = 0.5*rho*(u*u + v*v)
scene-ke = {'render-1': {'image-name': 'plots_order4_FAC2/ke-{t:2.5f}',
                        'image-width': 1920,
                        'image-height': 1080},
            'field': 'kenergy', 
            'type': 'pseudocolor',
            'color-table_name': 'Green'}
            ; 'min-value': 0.0, 
            ; 'max-value': 1.0}

field-p = p
scene-p = {'render-1': {'image-name': 'plots_order4_FAC2/p-{t:2.5f}',
                        'image-width': 1920,
                        'image-height': 1080}, 
            'field': 'p', 
            'type': 'pseudocolor', 
            'color-table_name': 'Cool to Warm'}
            ; 'min-value': 91324, 
            ; 'max-value': 111326}

field-rho = rho
scene-rho = {'render-1': {'image-name': 'plots_order4_FAC2/rho-{t:2.5f}', 
                        'image-width': 1920,
                        'image-height': 1080},
            'field': 'rho', 
            'type': 'pseudocolor', 
            'color-table_name': 'Inferno'}
            ; 'min-value': 1, 
            ; 'max-value': 1.5}

pipeline-gradrho = [{'type': 'gradient', 
                'field': 'rho', 
                'output-name': 'gradrho'},
                {'type': 'vector_magnitude', 
                'field': 'gradrho', 
                'output-name': 'maggradrho'}]
scene-maggradrho = {'render-1': {'image-name': 'plots_order4_FAC2/maggradrho-{t:2.5f}',
                        'image-width': 1920,
                        'image-height': 1080},
            'pipeline': 'gradrho',
            'field': 'maggradrho', 
            'type': 'pseudocolor', 
            'color-table_name': 'X Ray',
            'color-table_reverse': 'true'}
            ; 'min-value': 0.0, 
            ; 'max-value': 1.0}

field-u = u, v
pipeline-umag = {'type': 'vector_magnitude', 
                'field': 'u', 
                'output-name': 'umag'}
scene-umag = {'render-1': {'image-name': 'plots_order4_FAC2/umag-{t:2.5f}',
                        'image-width': 1920,
                        'image-height': 1080}, 
            'pipeline': 'umag',
            'field': 'umag', 
            'type': 'pseudocolor', 
            'color-table_name': 'Viridis'}
            ; 'min-value': 0.0, 
            ; 'max-value': 150}

# VTK-m Color Tables = https://ascent.readthedocs.io/en/stable/Actions/VTKmColorTables.html