#==============================================================================
# Kelvin-Helmholtz Euler - Simulation Configuration
# 
# Description:
# Configuration file for a 2D Kelvin-Helmholtz instability simulation using PyFR.
# The simulation uses a 4th order discretization with entropy filtering
# for shock capturing.
#==============================================================================

#------------------------------------------------------------------------------
# Execution Instructions
#------------------------------------------------------------------------------
# 1. Environment Setup:
#    cd /home/dp114856/PyFR
#    source venv/bin/activate
#
# 2. Mesh Generation:
#    cd /home/dp114856/scratch/PyFR/2d-kelvin-helmholtz-euler
#    gmsh kelvin-helmholtz-euler.geo -2 -o kelvin-helmholtz-euler-256x256.msh
#    pyfr import kelvin-helmholtz-euler-256x256.msh kelvin-helmholtz-euler-256x256.pyfrm
#
# 3a. Single MPI Rank Execution:
#    - New Run:
#      pyfr -p run -b cuda kelvin-helmholtz-euler-256x256.pyfrm kelvin-helmholtz-euler.ini
#    - Restart:
#      pyfr -p restart -b cuda kelvin-helmholtz-euler-256x256.pyfrm out_256x256/kelvin-helmholtz-euler-5.00.pyfrs kelvin-helmholtz-euler.ini
#
# 3b. Multiple MPI Ranks Execution:
#    - Partition mesh for 2 ranks:
#      pyfr partition 2 kelvin-helmholtz-euler-256x256.pyfrm .
#    - Run with OpenMP backend using 2 ranks:
#      mpiexec -n 2 pyfr -p run -b openmp kelvin-helmholtz-euler-256x256.pyfrm kelvin-helmholtz-euler.ini

#------------------------------------------------------------------------------
# Backend Configuration
#------------------------------------------------------------------------------
[backend]
precision = double
rank-allocator = linear

[backend-cuda]
device-id = round-robin
mpi-type = cuda-aware

#------------------------------------------------------------------------------
# Physical Constants
#------------------------------------------------------------------------------
[constants]
# Fluid Properties
gamma = 1.4              # Ratio of specific heats
mu = 2e-4               # Dynamic viscosity
Pr = 0.73               # Prandtl number

# Initial States
rl = 120                # Left state density
pl = 85.7142857143      # Left state pressure
rr = 1.2                # Right state density
pr = 0.857142857143     # Right state pressure

# Problem Parameters
slope = 15              # Interface steepness
amplitude = 0.02        # Perturbation amplitude

#------------------------------------------------------------------------------
# Solver Configuration
#------------------------------------------------------------------------------
[solver]
system = euler
order = 4
shock-capturing = entropy-filter

[solver-entropy-filter]
d-min = 1e-6            # Density minimum
p-min = 1e-6            # Pressure minimum
e-tol = 1e-6            # Energy tolerance
niters = 2              # Number of filter iterations

[solver-time-integrator]
formulation = std
scheme = rk4
controller = none
tstart = 0
tend = 15
dt = 2e-4

[solver-interfaces]
riemann-solver = hllc
ldg-beta = 0.5
ldg-tau = 0.1

[solver-interfaces-line]
flux-pts = gauss-legendre-lobatto

[solver-elements-quad]
soln-pts = gauss-legendre-lobatto

#------------------------------------------------------------------------------
# Initial Conditions
#------------------------------------------------------------------------------
[soln-ics]
B = (tanh(15*y+7.5)-tanh(15*y-7.5))
rho = 0.5 + 0.75*%(B)s
u = 0.5*(%(B)s - 1)
v = 0.1*sin(2*pi*x)
p = 1.0

#------------------------------------------------------------------------------
# Solution Monitoring and Output
#------------------------------------------------------------------------------
[soln-plugin-nancheck]
nsteps = 50

[soln-plugin-writer]
dt-out = 1.0
basedir = out_256x256
basename = kelvin-helmholtz-euler-{t:.2f}
post-action = echo "Wrote file {soln} at time {t} for mesh {mesh}."

#------------------------------------------------------------------------------
# Visualization
#------------------------------------------------------------------------------
[soln-plugin-ascent]
nsteps = 500
division = 5

# Kinetic Energy Field
field-kenergy = 0.5*rho*(u*u + v*v)
scene-ke = {'render-1': {'image-name': 'plots_order4_256x256/ke-{t:4.2f}',
                        'image-width': 1920,
                        'image-height': 1080},
            'field': 'kenergy', 
            'type': 'pseudocolor',
            'color-table_name': 'Green',
            'min-value': 0.0, 
            'max-value': 1.0}

# Density Field
field-rho = rho
scene-rho = {'render-1': {'image-name': 'plots_order4_256x256/rho-{t:4.2f}', 
                        'image-width': 1920,
                        'image-height': 1080},
            'field': 'rho', 
            'type': 'pseudocolor', 
            'color-table_name': 'Inferno',
            'min-value': 0.25, 
            'max-value': 2.5}

# Pressure Field
field-p = p
scene-p = {'render-1': {'image-name': 'plots_order4_256x256/p-{t:4.2f}',
                        'image-width': 1920,
                        'image-height': 1080}, 
            'field': 'p', 
            'type': 'pseudocolor', 
            'color-table_name': 'Cool to Warm',
            'min-value': 0.75, 
            'max-value': 1.25}

# Velocity Magnitude Field
field-u = u, v
pipeline-umag = {'type': 'vector_magnitude', 
                'field': 'u', 
                'output-name': 'umag'}
scene-umag = {'render-1': {'image-name': 'plots_order4_256x256/umag-{t:4.2f}',
                        'image-width': 1920,
                        'image-height': 1080},  
            'pipeline': 'umag',
            'field': 'umag', 
            'type': 'pseudocolor', 
            'color-table_name': 'Viridis',
            'min-value': 0.0, 
            'max-value': 1.5}

# Reference: VTK-m Color Tables - https://ascent.readthedocs.io/en/stable/Actions/VTKmColorTables.html
