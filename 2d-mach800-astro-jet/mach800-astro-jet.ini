# =============================
# RUN INSTRUCTIONS
# =============================
# cd /home/dp114856/PyFR
# source venv/bin/activate
# =============================
# SINGLE MPI RANK
# =============================
# cd /home/dp114856/scratch/PyFR/2d-mach800-astro-jet
# gmsh mach800-astro-jet.geo -2 -o mach800-astro-jet-2400x800.msh
# pyfr import mach800-astro-jet-2400x800.msh mach800-astro-jet-2400x800.pyfrm
# =============================
# RUN SINGLE MPI RANK
# =============================
# pyfr -p run -b cuda mach800-astro-jet-2400x800.pyfrm mach800-astro-jet.ini
# pyfr -p restart -b cuda mach800-astro-jet-2400x800.pyfrm out_2400x800/mach800-astro-jet-0.001000.pyfrs mach800-astro-jet.ini
# =============================
# RUN MULTIPLE MPI RANKS
# =============================
#
#
# =============================
# BACKEND
# =============================

[backend]
precision = double
rank-allocator = linear

[backend-cuda]
device-id = round-robin
mpi-type = cuda-aware

# =============================
# CONSTANTS
# =============================

[constants]
# PyFR Constants
gamma = 1.4

# =============================
# SOLVER
# =============================

[solver]
system = euler
order = 3
shock-capturing = entropy-filter

[solver-entropy-filter]
d-min = 1e-6
p-min = 1e-6
e-tol = 1e-4

[solver-time-integrator]
scheme = rk4
controller = none
tstart = 0.0
tend = 0.002
dt = 0.25e-8

[solver-interfaces]
riemann-solver = hllc
ldg-beta = 0.5
ldg-tau = 0.1

[solver-interfaces-line]
flux-pts = gauss-legendre-lobatto

[solver-elements-quad]
soln-pts = gauss-legendre-lobatto

# =============================
# INITIALIZATION
# =============================

[soln-ics]
rho = (0.1*gamma)
u = 0
v = 0
p = 1

# =============================
# BOUNDARY CONDITIONS
# =============================

[soln-bcs-inlet]
type = sup-in-fa
rho = (1.0*gamma)
u = 800
v = 0
p = 1

[soln-bcs-outlet]
type = sup-out-fn

[soln-bcs-slip]
type = slp-adia-wall

[soln-bcs-symmetry]
type = slp-adia-wall

# =============================
# PLUGINS
# =============================

[soln-plugin-nancheck]
nsteps = 50

[soln-plugin-writer]
dt-out = 0.0001
basedir = out_2400x800
basename = mach800-astro-jet-{t:1.6f}
post-action = echo "Wrote file {soln} at time {t} for mesh {mesh}."

# =============================
# RENDERING
# =============================

[soln-plugin-ascent]
nsteps = 800
division = 4

field-kenergy = 0.5*rho*(u*u + v*v)
pipeline-log10kenergy = {'type': 'log10', 
                'field': 'kenergy', 
                'output-name': 'log10kenergy',
                'clamp-min-value': 1e-2}
scene-log10kenergy = {'render-1': {'image-name': 'plots_order3_2400x800/log10kenergy-{t:1.6f}',
                        'image-width': 1920,
                        'image-height': 1080},
            'pipeline': 'log10kenergy',
            'field': 'log10kenergy', 
            'type': 'pseudocolor',
            'color-table_name': 'Green',
            'min-value': 0, 
            'max-value': 7}

field-p = p
scene-p = {'render-1': {'image-name': 'plots_order3_2400x800/p-{t:1.6f}',
                        'image-width': 1920,
                        'image-height': 1080}, 
            'field': 'p', 
            'type': 'pseudocolor', 
            'color-table_name': 'Cool to Warm',
            'min-value': 0, 
            'max-value': 75000}

field-rho = rho
pipeline-log10rho = {'type': 'log10', 
                'field': 'rho', 
                'output-name': 'log10rho',
                'clamp-min-value': 1e-4}
scene-log10rho = {'render-1': {'image-name': 'plots_order3_2400x800/log10rho-{t:1.6f}', 
                        'image-width': 1920,
                        'image-height': 1080},
            'pipeline': 'log10rho',
            'field': 'log10rho', 
            'type': 'pseudocolor', 
            'color-table_name': 'Inferno',
            'min-value': -2, 
            'max-value': 2}

pipeline-gradrho = [{'type': 'gradient', 
                'field': 'rho', 
                'output-name': 'gradrho'},
                {'type': 'vector_magnitude', 
                'field': 'gradrho', 
                'output-name': 'maggradrho'},
                {'type': 'log10', 
                'field': 'maggradrho', 
                'output-name': 'log10maggradrho',
                'clamp-min-value': 1e-2}]
scene-log10maggradrho = {'render-1': {'image-name': 'plots_order3_2400x800/log10maggradrho-{t:1.6f}',
                        'image-width': 1920,
                        'image-height': 1080},
            'pipeline': 'gradrho',
            'field': 'log10maggradrho', 
            'type': 'pseudocolor', 
            'color-table_name': 'X Ray',
            'color-table_reverse': 'true',
            'min-value': 0,
            'max-value': 4}

field-u = u, v
pipeline-umag = {'type': 'vector_magnitude', 
                'field': 'u', 
                'output-name': 'umag'}
scene-umag = {'render-1': {'image-name': 'plots_order3_2400x800/umag-{t:1.6f}',
                        'image-width': 1920,
                        'image-height': 1080}, 
            'pipeline': 'umag',
            'field': 'umag', 
            'type': 'pseudocolor', 
            'color-table_name': 'Viridis',
            'min-value': 0, 
            'max-value': 800}

# VTK-m Color Tables = https://ascent.readthedocs.io/en/stable/Actions/VTKmColorTables.html