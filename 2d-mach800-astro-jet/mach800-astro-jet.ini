#==============================================================================
# Mach 800 Astrophysical Jet - Simulation Configuration
# 
# Description:
# Configuration file for a 2D Mach 800 astrophysical jet simulation using PyFR.
# The simulation uses a 3rd order discretization with entropy filtering.
#==============================================================================

#------------------------------------------------------------------------------
# Execution Instructions
#------------------------------------------------------------------------------
# 1. Environment Setup:
#    cd /home/dp114856/PyFR
#    source venv/bin/activate
#
# 2. Mesh Generation:
#    cd /home/dp114856/scratch/PyFR/2d-mach800-astro-jet
#    gmsh mach800-astro-jet.geo -2 -o mach800-astro-jet-2400x800.msh
#    pyfr import mach800-astro-jet-2400x800.msh mach800-astro-jet-2400x800.pyfrm
#
# 3a. Single MPI Rank Execution:
#    - New Run:
#      pyfr -p run -b cuda mach800-astro-jet-2400x800.pyfrm mach800-astro-jet.ini
#    - Restart:
#      pyfr -p restart -b cuda mach800-astro-jet-2400x800.pyfrm out_2400x800/mach800-astro-jet-0.001700.pyfrs mach800-astro-jet.ini
#
# 3b. Multiple MPI Ranks Execution:
#    - Partition mesh for 2 ranks:
#      pyfr partition 2 mach800-astro-jet-2400x800.pyfrm .
#    - Run with OpenMP backend using 2 ranks:
#      mpiexec -n 2 pyfr -p run -b openmp mach800-astro-jet-2400x800.pyfrm mach800-astro-jet.ini

#------------------------------------------------------------------------------
# Backend Configuration
#------------------------------------------------------------------------------
[backend]
precision = double
rank-allocator = linear

[backend-cuda]
device-id = round-robin
mpi-type = cuda-aware

#------------------------------------------------------------------------------
# Physical Constants
#------------------------------------------------------------------------------
[constants]
gamma = 1.4              # Ratio of specific heats

#------------------------------------------------------------------------------
# Solver Configuration
#------------------------------------------------------------------------------
[solver]
system = euler
order = 3
shock-capturing = entropy-filter

[solver-entropy-filter]
d-min = 1e-6            # Density minimum
p-min = 1e-6            # Pressure minimum
e-tol = 1e-6            # Energy tolerance
niters = 2              # Number of filter iterations

[solver-time-integrator]
scheme = rk4
controller = none
tstart = 0.0
tend = 0.002
dt = 5e-8

[solver-interfaces]
riemann-solver = hllc
ldg-beta = 0.5
ldg-tau = 0.1

[solver-interfaces-line]
flux-pts = gauss-legendre-lobatto

[solver-elements-quad]
soln-pts = gauss-legendre-lobatto

#------------------------------------------------------------------------------
# Initial Conditions
#------------------------------------------------------------------------------
[soln-ics]
rho = (0.1*gamma)
u = 0
v = 0
p = 1

#------------------------------------------------------------------------------
# Boundary Conditions
#------------------------------------------------------------------------------
[soln-bcs-inlet]
type = sup-in-fa           # Supersonic inflow
rho = (1.0*gamma)
u = 800
v = 0
p = 1

[soln-bcs-free]
type = sup-in-fa           # Supersonic free stream
rho = (0.1*gamma)
u = 0
v = 0
p = 1

[soln-bcs-outlet]
type = sup-out-fn          # Supersonic outflow

[soln-bcs-symmetry]
type = slp-adia-wall       # Slip wall

#------------------------------------------------------------------------------
# Solution Monitoring and Output
#------------------------------------------------------------------------------
[soln-plugin-nancheck]
nsteps = 100

[soln-plugin-writer]
dt-out = 0.0001
basedir = out_2400x800
basename = mach800-astro-jet-{t:1.6f}
post-action = echo "Wrote file {soln} at time {t} for mesh {mesh}."

#------------------------------------------------------------------------------
# Visualization
#------------------------------------------------------------------------------
[soln-plugin-ascent]
nsteps = 100
division = 4

# Kinetic Energy Field (Log Scale)
field-kenergy = 0.5*rho*(u*u + v*v)
pipeline-log10kenergy = {'type': 'log10', 
                'field': 'kenergy', 
                'output-name': 'log10kenergy',
                'clamp-min-value': 1e-2}
scene-log10kenergy = {'render-1': {'image-name': 'plots_order3_2400x800/log10kenergy-{t:1.6f}',
                        'image-width': 1920,
                        'image-height': 1080},
            'pipeline': 'log10kenergy',
            'field': 'log10kenergy', 
            'type': 'pseudocolor',
            'color-table_name': 'Green',
            'min-value': 0, 
            'max-value': 7}

# Pressure Field
field-p = p
scene-p = {'render-1': {'image-name': 'plots_order3_2400x800/p-{t:1.6f}',
                        'image-width': 1920,
                        'image-height': 1080}, 
            'field': 'p', 
            'type': 'pseudocolor', 
            'color-table_name': 'Cool to Warm',
            'min-value': 0, 
            'max-value': 75000}

# Density Field (Log Scale)
field-rho = rho
pipeline-log10rho = {'type': 'log10', 
                'field': 'rho', 
                'output-name': 'log10rho',
                'clamp-min-value': 1e-4}
scene-log10rho = {'render-1': {'image-name': 'plots_order3_2400x800/log10rho-{t:1.6f}', 
                        'image-width': 1920,
                        'image-height': 1080},
            'pipeline': 'log10rho',
            'field': 'log10rho', 
            'type': 'pseudocolor', 
            'color-table_name': 'Inferno',
            'min-value': -2, 
            'max-value': 2}

# Density Gradient Magnitude (Log Scale)
pipeline-gradrho = [{'type': 'gradient', 
                'field': 'rho', 
                'output-name': 'gradrho'},
                {'type': 'vector_magnitude', 
                'field': 'gradrho', 
                'output-name': 'maggradrho'},
                {'type': 'log10', 
                'field': 'maggradrho', 
                'output-name': 'log10maggradrho',
                'clamp-min-value': 1e-2}]
scene-log10maggradrho = {'render-1': {'image-name': 'plots_order3_2400x800/log10maggradrho-{t:1.6f}',
                        'image-width': 1920,
                        'image-height': 1080},
            'pipeline': 'gradrho',
            'field': 'log10maggradrho', 
            'type': 'pseudocolor', 
            'color-table_name': 'X Ray',
            'color-table_reverse': 'true',
            'min-value': 0,
            'max-value': 4}

# Velocity Magnitude Field
field-u = u, v
pipeline-umag = {'type': 'vector_magnitude', 
                'field': 'u', 
                'output-name': 'umag'}
scene-umag = {'render-1': {'image-name': 'plots_order3_2400x800/umag-{t:1.6f}',
                        'image-width': 1920,
                        'image-height': 1080}, 
            'pipeline': 'umag',
            'field': 'umag', 
            'type': 'pseudocolor', 
            'color-table_name': 'Viridis',
            'min-value': 0, 
            'max-value': 800}

# Reference: VTK-m Color Tables - https://ascent.readthedocs.io/en/stable/Actions/VTKmColorTables.html
